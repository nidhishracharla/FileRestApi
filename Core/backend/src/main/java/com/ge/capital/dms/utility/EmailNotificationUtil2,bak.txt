package com.ge.capital.dms.utility;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.Date;
import java.util.List;
import java.util.Properties;
import java.util.zip.ZipEntry;
import java.util.zip.ZipOutputStream;

import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeBodyPart;
import javax.mail.internet.MimeMessage;
import javax.mail.internet.MimeMultipart;

import org.apache.commons.lang3.ArrayUtils;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import javax.activation.DataHandler;
import javax.activation.FileDataSource;
import javax.mail.BodyPart;
import javax.mail.Message;
import javax.mail.MessagingException;
import javax.mail.Multipart;

@Component
public class EmailNotificationUtil2 {
	private static final Logger logger = Logger.getLogger(EmailNotificationUtil2.class);

	@Autowired
	DmsUtilityService dmsUtilityService;

	public void sendEmailAlert(String UPLD_DIR, List<String> files, String metadata, String message, String toEmail,
			String operation) {
		Properties props = dmsUtilityService.loadPropertiesFile(DmsUtilityConstants.applicationConstantsResource);
		try {
			String zipFilePath = props.getProperty("Zip.File.Path") + "\\Files.zip";
			createZipFile(UPLD_DIR, files, zipFilePath);
			sendEmail(zipFilePath, metadata, toEmail, message, operation);
		} catch (FileNotFoundException e) {
			logger.error(e.getMessage(), e);
		} catch (IOException e) {
			logger.error(e.getMessage(), e);
		} catch (MessagingException e) {
			logger.error(e.getMessage(), e);
		}
	}

	private void sendEmail(String zipFilePath, String metadata, String toEmail, String message, String operation)
			throws MessagingException, UnsupportedEncodingException {
		String toEmailArray[] = toEmail.split(",");
		Properties props = System.getProperties();
		props.put("mail.smtp.host", "mail.ad.ge.com");
		props.put("mail.protocol", "smtp");
		props.put("mail.smtps.auth", "false");
		props.put("mail.smtp.port", "25");
		props.put("mail.smtps.starttls.enable", "false");
		Session session = Session.getDefaultInstance(props);
		session.setDebug(true);

		MimeMessage msg = new MimeMessage(session);
		msg.addHeader("Content-type", "text/HTML; charset=UTF-8");
		msg.addHeader("format", "flowed");
		msg.addHeader("Content-Transfer-Encoding", "8bit");
		String body = "";
		if (operation.equals("Upload")) {
			msg.setFrom(new InternetAddress("DMS_Upload_Failure_Notification@ge.com", "DMS_Upload"));
			msg.setReplyTo(InternetAddress.parse("no_reply@ge.com", false));
			msg.setSubject("Documents upload failure alert", "UTF-8");
			body = "Documents with Metadata : " + metadata + "\n Message : " + message;
		}
		else if (operation.equals("Email")) {
			msg.setFrom(new InternetAddress("no_reply@ge.com", "Requested_Documents"));
			msg.setReplyTo(InternetAddress.parse("no_reply@ge.com", false));
			msg.setSubject("Documents from DMS", "UTF-8");
			body = metadata + "\n Message : " + message;
		}
		msg.setSentDate(new Date());
		InternetAddress[] toAddresses = null;
		if (null != toEmailArray) {
			for (String toAddress : toEmailArray) {
				toAddresses = ArrayUtils.add(toAddresses, new InternetAddress(toAddress));
			}
			msg.addRecipients(Message.RecipientType.TO, toAddresses);
		}
		BodyPart messageBodyPart = new MimeBodyPart();		
		logger.info("Body of the email : " + body);
		messageBodyPart.setText(body);
		Multipart multipart = new MimeMultipart();
		multipart.addBodyPart(messageBodyPart);
		messageBodyPart = new MimeBodyPart();
		FileDataSource source = new FileDataSource(zipFilePath);
		messageBodyPart.setDataHandler(new DataHandler(source));
		messageBodyPart.setFileName("Files.zip");
		multipart.addBodyPart(messageBodyPart);
		msg.setContent(multipart);
		Transport.send(msg);
	}

	private void createZipFile(String UPLD_DIR, List<String> files, String zipFilePath) throws IOException {
		FileOutputStream fos = new FileOutputStream(zipFilePath);
		ZipOutputStream zos = new ZipOutputStream(fos);
		for (String temp : files) {
			File tempFile = new File(UPLD_DIR + "\\" + temp);
			zos.putNextEntry(new ZipEntry(tempFile.getName()));
			byte[] bytes = Files.readAllBytes(Paths.get(tempFile.getPath()));
			zos.write(bytes, 0, bytes.length);
		}
		zos.closeEntry();
		zos.close();
	}

	public void emailWithoutAttachments(int responseCode, String exceptionMessage, String toEmail) throws MessagingException, UnsupportedEncodingException {
		// TODO Auto-generated method stub
		String toEmailArray[] = toEmail.split(",");
		Properties props = System.getProperties();
		props.put("mail.smtp.host", "mail.ad.ge.com");
		props.put("mail.protocol", "smtp");
		props.put("mail.smtps.auth", "false");
		props.put("mail.smtp.port", "25");
		props.put("mail.smtps.starttls.enable", "false");
		Session session = Session.getDefaultInstance(props);
		session.setDebug(true);

		MimeMessage msg = new MimeMessage(session);
		msg.addHeader("Content-type", "text/HTML; charset=UTF-8");
		msg.addHeader("format", "flowed");
		msg.addHeader("Content-Transfer-Encoding", "8bit");

		msg.setFrom(new InternetAddress("no_reply@ge.com", "DMS_Documents"));

		msg.setReplyTo(InternetAddress.parse("no_reply@ge.com", false));

		msg.setSubject("Failed to Deliver files requested", "UTF-8");

		msg.setSentDate(new Date());
		InternetAddress[] toAddresses = null;
		if (null != toEmailArray) {
			for (String toAddress : toEmailArray) {
				toAddresses = ArrayUtils.add(toAddresses, new InternetAddress(toAddress));
			}
			msg.addRecipients(Message.RecipientType.TO, toAddresses);
		}
		msg.setSubject("Failed to deliver documents");
		msg.setText("Document download failed due to " +exceptionMessage + ", Response Code : " + responseCode);
		Transport.send(msg);
	}

}
